SET SQL DIALECT 3;

SET NAMES WIN1252;

CREATE DATABASE 'C:\Receita\RECEITA.FDB' USER 'SYSDBA' PASSWORD 'masterkey' PAGE_SIZE 16384 DEFAULT CHARACTER SET UTF8 COLLATION UNICODE_CI_AI;
-- CREATE DATABASE 'C:\Receita\RECEITA.FDB' USER 'SYSDBA' PASSWORD 'masterkey' PAGE_SIZE 16384 DEFAULT CHARACTER SET WIN1252 COLLATION WIN_PTBR;
-- CREATE DATABASE '/opt/databases/RECEITA.FDB' USER 'SYSDBA' PASSWORD 'masterkey' PAGE_SIZE 16384 DEFAULT CHARACTER SET WIN1252 COLLATION WIN_PTBR;
-- CREATE DATABASE 'C:\Receita\RECEITA.FDB' USER 'SYSDBA' PASSWORD 'masterkey' PAGE_SIZE 16384 DEFAULT CHARACTER SET WIN1252 COLLATION WIN_PTBR;
-- CREATE TABLE "DADOS_01" EXTERNAL 'C:\Receita\K3241.K03200DV.D00703.L00001.csv' ("REGISTRO"  CHAR(1201));
-- CREATE TABLE "DADOS_20" EXTERNAL 'C:\Receita\K3241.K03200DV.D00703.L00020.csv' ("REGISTRO"  CHAR(1201));
-- CREATE TABLE REGISTRO (Id INTEGER GENERATED BY DEFAULT AS IDENTITY, TEXTO CHAR(1200));

CREATE TABLE "ControleImportacao" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "NomeArquivo" VARCHAR(11) NOT NULL,
    "DataGravacao" DATE NOT NULL,
    "NumeroRemessa" VARCHAR(8) NOT NULL,
    "DataImportacao" DATE
);

ALTER TABLE "ControleImportacao" ADD CONSTRAINT "PK_ControleImportacao" PRIMARY KEY ("Id");
ALTER TABLE "ControleImportacao" ADD CONSTRAINT "UK_ControleImportacao" UNIQUE ("NomeArquivo");

CREATE TABLE "Logico" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" VARCHAR(1) NOT NULL,
    "Descricao" VARCHAR(5) NOT NULL
);

ALTER TABLE "Logico" ADD CONSTRAINT "PK_Logico" PRIMARY KEY ("Id");
ALTER TABLE "Logico" ADD CONSTRAINT "UK_Logico" UNIQUE ("Codigo");

INSERT INTO "Logico" ("Id","Codigo","Descricao") VALUES (1,'N', 'Não');
INSERT INTO "Logico" ("Id","Codigo","Descricao") VALUES (2,'S', 'Sim');

CREATE TABLE "MatrizFilial" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(6) NOT NULL
);

ALTER TABLE "MatrizFilial" ADD CONSTRAINT "PK_MatrizFilial" PRIMARY KEY ("Id");
ALTER TABLE "MatrizFilial" ADD CONSTRAINT "UK_MatrizFilial" UNIQUE ("Codigo");

INSERT INTO "MatrizFilial" ("Codigo","Descricao") VALUES (1, 'Matriz');
INSERT INTO "MatrizFilial" ("Codigo","Descricao") VALUES (2, 'Filial');

CREATE TABLE "SituacaoCadastral" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(8) NOT NULL
);

ALTER TABLE "SituacaoCadastral" ADD CONSTRAINT "PK_SituacaoCadastral" PRIMARY KEY ("Id");
ALTER TABLE "SituacaoCadastral" ADD CONSTRAINT "UK_SituacaoCadastral" UNIQUE ("Codigo");

INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (1, 'Nula');
INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (2, 'Ativa');
INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (3, 'Suspensa');
INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (4, 'Inapta');
INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (8, 'Baixada');

CREATE TABLE "MotivoSituacaoCadastral" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(100) NOT NULL
);

ALTER TABLE "MotivoSituacaoCadastral" ADD CONSTRAINT "PK_MotivoSituacaoCadastral" PRIMARY KEY ("Id");
ALTER TABLE "MotivoSituacaoCadastral" ADD CONSTRAINT "UK_MotivoSituacaoCadastral" UNIQUE ("Codigo");

INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (1, 'EXTINÇÃO POR ENCERRAMENTO LIQUIDAÇÃO VOLUNTÁRIA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (2, 'INCORPORAÇÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (3, 'FUSÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (4, 'CISÃO TOTAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (5, 'ENCERRAMENTO DA FALÊNCIA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (6, 'ENCERRAMENTO DA LIQUIDAÇÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (7, 'ELEVAÇÃO A MATRIZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (8, 'TRANSPASSE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (9, 'NÃO INÍCIO DE ATIVIDADE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (10, 'EXTINÇÃO PELO ENCERRAMENTO DA LIQUIDAÇÃO JUDICIAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (11, 'ANULAÇÃO POR MULTICIPLIDADE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (12, 'ANULAÇÃO ONLINE DE OFICIO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (13, 'OMISSA CONTUMAZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (14, 'OMISSA NÃO LOCALIZADA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (15, 'INEXISTENTE DE FATO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (16, 'ANULAÇÃO POR VÍCIOS');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (17, 'BAIXA INICIADA E AINDA NÃO DEFERIDA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (18, 'INTERRUPÇÃO TEMPORÁRIA DAS ATIVIDADES');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (19, 'OMISSO DE DIRPJ ATÉ 5 EXERCÍCIOS');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (20, 'EM CONDIÇÃO DE INAPTIDÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (21, 'PEDIDO DE BAIXA INDEFERIDA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (22, 'RESTABELECIMENTO COM CERTIDÃO POSITIVA COM EFEITO DE NEGATIVA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (23, 'COM PENDÊNCIA FISCAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (24, 'POR EMISSÃO CERTIDÃO NEGATIVA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (25, 'CERTIDÃO POSITIVA COM EFEITO DE NEGATIVA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (26, 'IRREGULARIDADE DE PAGAMENTO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (27, 'IRREGULARIDADE DE RECOLHIMENTO E EXIGIBILIDADE SUSPENSA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (28, 'TRANSFERÊNCIA FILIAL CONDIÇÃO MATRIZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (29, 'AGUARDANDO CONF. DE DIRPJ/DIPJ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (30, 'ANR - AGUARDANDO CONF. DE DIRPJ/DIPJ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (31, 'EXTINÇÃO DA FILIAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (32, 'INEXISTENTE DE FATO – ADE/COSAR');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (33, 'TRANSFERÊNCIA DO ÓRGÃO LOCAL A CONDIÇÃO DE FILIAL DO ÓRGÃO REGIONAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (34, 'ANULAÇÃO DE INSCRIÇÃO INDEVIDA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (35, 'EMPRESA ESTRANGEIRA AGUARDANDO DOCUMENTAÇÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (36, 'PRÁTICA IRREGULAR DE OPERAÇÃO DE COMERCIO EXTERIOR');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (37, 'BAIXA DE PRODUTOR RURAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (38, 'BAIXA DEFERIDA PELA RFB AGUARDANDO ANALISE DO CONVENENTE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (39, 'BAIXA DEFERIDA PELA RFB E INDEFERIDA PELO CONVENENTE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (40, 'BAIXA INDEFERIDA PELA RFB E AGUARDANDO ANALISE DO CONVENENTE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (41, 'BAIXA INDEFERIDA PELA RFB E DEFERIDA PELO CONVENENTE');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (42, 'BAIXA INDEFERIDA PELA RFB E SEFIN, AGUARDANDO ANALISE SEFAZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (43, 'BAIXA DEFERIDA PELA RFB, AGUARDANDO ANALISE DA SEFAZ E INDEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (44, 'BAIXA DEFERIDA PELA RFB E SEFAZ, AGUARDANDO ANALISE SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (45, 'BAIXA DEFERIDA PELA RFB, AGUARDANDO ANALISE DA SEFIN E INDEFERIDA PELA SEFAZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (46, 'BAIXA DEFERIDA PELA RFB E SEFAZ E INDEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (47, 'BAIXA DEFERIDA PELA RFB E SEFIN E INDEFERIDA PELA SEFAZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (48, 'BAIXA INDEFERIDA PELA RFB, AGUARDANDO ANALISE SEFAZ E DEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (49, 'BAIXA INDEFERIDA PELA RFB, AGUARDANDO ANALISE DA SEFAZ E INDEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (50, 'BAIXA INDEFERIDA PELA RFB, DEFERIDA PELA SEFAZ E AGUARDANDO ANALISE DA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (51, 'BAIXA INDEFERIDA PELA RFB E SEFAZ, AGUARDANDO ANALISE DA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (52, 'BAIXA INDEFERIDA PELA RFB, DEFERIDA PELA SEFAZ E INDEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (53, 'BAIXA INDEFERIDA PELA RFB E SEFAZ E DEFERIDA PELA SEFIN');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (54, 'BAIXA - TRATAMENTO DIFERENCIADO DADO AS ME E EPP (LEI COMPLEMENTAR NUMERO 123/2006)');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (55, 'DEFERIDO PELO CONVENENTE, AGUARDANDO ANALISE DA RFB');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (60, 'ARTIGO 30, VI, DA IN 748/2007');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (61, 'INDICIO INTERPOS. FRAUDULENTA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (62, 'FALTA DE PLURALIDADE DE SOCIOS');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (63, 'OMISSÃO DE DECLARAÇÕES');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (64, 'LOCALIZAÇÃO DESCONHECIDA');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (66, 'INAPTIDÃO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (67, 'REGISTRO CANCELADO');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (70, 'ANULAÇÃO POR NÃO CONFIRMADO ATO DE "REGISTRO" DO MEI NA JUNTA COMERCIAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (71, 'INAPTIDÃO (LEI 11.941/2009 ART.54)');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (72, 'DETERMINAÇÃO JUDICIAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (73, 'OMISSÃO CONTUMAZ');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (74, 'INCONSISTÊNCIA CADASTRAL');
INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (80, 'BAIXA REGISTRADA NA JUNTA, INDEFERIDA NA RFB');

CREATE TABLE "Pais" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" VARCHAR(3) NOT NULL,
    "Nome" VARCHAR(70) NOT NULL
);

ALTER TABLE "Pais" ADD CONSTRAINT "PK_Pais" PRIMARY KEY ("Id");
ALTER TABLE "Pais" ADD CONSTRAINT "UK_Pais" UNIQUE ("Codigo");

INSERT INTO "Pais" ("Codigo","Nome") VALUES ('105', 'BRASIL');

CREATE TABLE "UnidadeFederacao" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" VARCHAR(2) NOT NULL,
    "Nome" VARCHAR(50) NOT NULL,
    "PaisId" INTEGER
);

ALTER TABLE "UnidadeFederacao" ADD CONSTRAINT "PK_UnidadeFederacao" PRIMARY KEY ("Id");
ALTER TABLE "UnidadeFederacao" ADD CONSTRAINT "UK_UnidadeFederacao" UNIQUE ("Codigo");
-- ALTER TABLE "UnidadeFederacao" ADD CONSTRAINT "FK_UnidadeFederacao_Pais" FOREIGN KEY ("PaisId") REFERENCES "Pais" ("Id");

INSERT INTO "UnidadeFederacao" ("Codigo","Nome") VALUES ('EX', 'EXTERIOR');

CREATE TABLE "Municipio" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" VARCHAR(4) NOT NULL,
    "Cnpj" VARCHAR(14),
    "Nome" VARCHAR(50) NOT NULL,
    "Uf" VARCHAR(2),
    "UnidadeFederacaoId" INTEGER
);

ALTER TABLE "Municipio" ADD CONSTRAINT "PK_Municipio" PRIMARY KEY ("Id");
ALTER TABLE "Municipio" ADD CONSTRAINT "UK_Municipio" UNIQUE ("Codigo");
-- ALTER TABLE "Municipio" ADD CONSTRAINT "FK_Municipio_UnidadeFederacaoId" FOREIGN KEY ("UnidadeFederacaoId") REFERENCES "UnidadeFederacao" ("Id");

CREATE TABLE "TipoSocio" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(30) NOT NULL
);

ALTER TABLE "TipoSocio" ADD CONSTRAINT "PK_TipoSocio" PRIMARY KEY ("Id");
ALTER TABLE "TipoSocio" ADD CONSTRAINT "UK_TipoSocio" UNIQUE ("Codigo");

INSERT INTO "TipoSocio" ("Codigo","Descricao") VALUES (1, 'Pessoa jurídica');
INSERT INTO "TipoSocio" ("Codigo","Descricao") VALUES (2, 'Pessoa física');
INSERT INTO "TipoSocio" ("Codigo","Descricao") VALUES (3, 'Estrangeiro');

CREATE TABLE "NaturezaJuridica" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(50) NOT NULL
);

ALTER TABLE "NaturezaJuridica" ADD CONSTRAINT "PK_NaturezaJuridica" PRIMARY KEY ("Id");
ALTER TABLE "NaturezaJuridica" ADD CONSTRAINT "UK_NaturezaJuridica" UNIQUE ("Codigo");

CREATE TABLE "AtividadeEconomica" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
	"CodigoSecao" VARCHAR(1),
	"NomeSecao" VARCHAR(100),
	"CodigoDivisao" VARCHAR(2),
	"NomeDivisao" VARCHAR(100),
	"CodigoGrupo" VARCHAR(4),
	"NomeGrupo" VARCHAR(100),
	"CodigoClasse" VARCHAR(7),
	"NomeClasse" VARCHAR(100),
    "Codigo" VARCHAR(7) NOT NULL,
    "Descricao" VARCHAR(100) NOT NULL
);

ALTER TABLE "AtividadeEconomica" ADD CONSTRAINT "PK_AtividadeEconomica" PRIMARY KEY ("Id");
ALTER TABLE "AtividadeEconomica" ADD CONSTRAINT "UK_AtividadeEconomica" UNIQUE ("Codigo");

CREATE TABLE "Qualificacao" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(70) NOT NULL,
    "ColetadoAtualmente" VARCHAR(1) NOT NULL
);

ALTER TABLE "Qualificacao" ADD CONSTRAINT "PK_Qualificacao" PRIMARY KEY ("Id");
ALTER TABLE "Qualificacao" ADD CONSTRAINT "UK_Qualificacao" UNIQUE ("Codigo");
-- ALTER TABLE "Qualificacao" ADD CONSTRAINT "FK_Qualificacao_Logico" FOREIGN KEY ("ColetadoAtualmente") REFERENCES "Logico" ("Codigo");

INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (1, 'Acionista', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (2, 'Acionista Controlador', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (3, 'Acionista Diretor', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (4, 'Acionista Presidente', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (5, 'Administrador', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (6, 'Administradora de consórcio de Empresas ou Grupo de Empresas', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (7, 'Comissário', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (8, 'Conselheiro de Administração', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (9, 'Curador', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (10, 'Diretor', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (11, 'Interventor', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (12, 'Inventariante', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (13, 'Liquidante', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (14, 'Mãe', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (15, 'Pai', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (16, 'Presidente', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (17, 'Procurador', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (18, 'Secretário', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (19, 'Síndico (Condomínio)', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (20, 'Sociedade Consorciada', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (21, 'Sociedade Filiada', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (22, 'Sócio', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (23, 'Sócio Capitalista', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (24, 'Sócio Comanditado', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (25, 'Sócio Comanditário', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (26, 'Sócio de Indústria', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (27, 'Sócio Residente ou Domiciliado no Exterior', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (28, 'Sócio-Gerente', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (29, 'Sócio ou Acionista Incapaz ou Relativamente Incapaz (exceto menor)', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (30, 'Sócio ou Acionista Menor (Assistido/Representado)', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (31, 'Sócio Ostensivo', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (32, 'Tabelião', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (33, 'Tesoureiro', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (34, 'Titular de Empresa Individual Imobiliária', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (35, 'Tutor', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (36, 'Gerente-Delegado', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (37, 'Sócio Pessoa Jurídica Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (38, 'Sócio Pessoa Física Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (39, 'Diplomata', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (40, 'Cônsul', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (41, 'Representante de Organização Internacional', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (42, 'Oficial de Registro', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (43, 'Responsável', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (44, 'Sócio Participante', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (45, 'Sócio Investidor', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (46, 'Ministro de Estado das Relações Exteriores', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (47, 'Sócio Pessoa Física Residente no Brasil', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (48, 'Sócio Pessoa Jurídica Domiciliado no Brasil', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (49, 'Sócio-Administrador', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (50, 'Empresário', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (51, 'Candidato a Cargo Político Eletivo', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (52, 'Sócio com Capital', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (53, 'Sócio sem Capital', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (54, 'Fundador', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (55, 'Sócio Comanditado Residente no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (56, 'Sócio Comanditário Pessoa Física Residente no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (57, 'Sócio Comanditário Pessoa Jurídica Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (58, 'Sócio Comanditário Incapaz', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (59, 'Produtor Rural', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (60, 'Cônsul Honorário', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (61, 'Responsável Indigena', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (62, 'Representante das Instituições Extraterritoriais', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (63, 'Cotas em Tesouraria', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (64, 'Administrador Judicial', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (65, 'Titular Pessoa Física Residente ou Domiciliado no Brasil', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (66, 'Titular Pessoa Física Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (67, 'Titular Pessoa Física Incapaz ou Relativamente Incapaz (exceto menor)', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (68, 'Titular Pessoa Física Menor (Assistido/Representado)', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (69, 'Beneficiário Final', 'N');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (70, 'Administrador Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (71, 'Conselheiro de Administração Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (72, 'Diretor Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (73, 'Presidente Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (74, 'Sócio-Administrador Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (75, 'Fundador Residente ou Domiciliado no Exterior', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (76, 'Protetor', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (77, 'Vice-Presidente', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (78, 'Titular Pessoa Jurídica Domiciliada no Brasil', 'S');
INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (79, 'Titular Pessoa Jurídica Domiciliada no Exterior', 'S');

CREATE TABLE "Porte" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(30) NOT NULL
);

ALTER TABLE "Porte" ADD CONSTRAINT "PK_Porte" PRIMARY KEY ("Id");
ALTER TABLE "Porte" ADD CONSTRAINT "UK_Porte" UNIQUE ("Codigo");

INSERT INTO "Porte" ("Codigo","Descricao") VALUES (0, 'Não Informado');
INSERT INTO "Porte" ("Codigo","Descricao") VALUES (1, 'Micro Empresa');
INSERT INTO "Porte" ("Codigo","Descricao") VALUES (3, 'Empresa de Pequeno Porte');
INSERT INTO "Porte" ("Codigo","Descricao") VALUES (5, 'Demais');

CREATE TABLE "OpcaoSimples" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Codigo" INTEGER NOT NULL,
    "Descricao" VARCHAR(30) NOT NULL
);

ALTER TABLE "OpcaoSimples" ADD CONSTRAINT "PK_OpcaoSimples" PRIMARY KEY ("Id");
ALTER TABLE "OpcaoSimples" ADD CONSTRAINT "UK_OpcaoSimples" UNIQUE ("Codigo");

INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (0, 'Não optante');
INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (5, 'Optante pelo simples');
INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (6, 'Excluído do simples');
INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (7, 'Optante pelo simples');
INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (8, 'Excluído do simples');

CREATE TABLE "DadoCadastral" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Cnpj" VARCHAR(14) NOT NULL,
    "MatrizFilialId" INTEGER NOT NULL,
    "RazaoSocialNomeEmpresarial" VARCHAR(150) NOT NULL,
    "NomeFantasia" VARCHAR(55),
    "SituacaoCadastralId" INTEGER,
    "DataSituacaoCadastral" DATE,
    "MotivoSituacaoCadastralId" INTEGER,
    "NomeCidadeExterior" VARCHAR(55),
    "PaisId" INTEGER, -- VARCHAR(3), -- alimentar essa tabela
    "NaturezaJuridicaId" INTEGER, -- Criar Tabela
    "DataInicioAtividade" DATE,
    "AtividadeEconomicaId" INTEGER, -- VARCHAR(7), -- CNAE Fiscal
    "TipoLogradouro" VARCHAR(20),
    "Logradouro" VARCHAR(60),
    "Numero" VARCHAR(6),
    "Complemento" VARCHAR(156),
    "Bairro" VARCHAR(50),
    "Cep" VARCHAR(8),
    "UnidadeFederacaoId" INTEGER, -- VARCHAR(2),
    "MunicipioId" INTEGER, -- VARCHAR(4), -- alimentar essa tabela
    "Ddd1" VARCHAR(4),
    "Telefone1" VARCHAR(9),
    "Ddd2" VARCHAR(4),
    "Telefone2" VARCHAR(9),
    "DddFax" VARCHAR(4),
    "Fax" VARCHAR(9),
    "CorreioEletronico" VARCHAR(115),
    "QualificacaoResponsavelId" INTEGER,
    "CapitalSocial" DECIMAL(14,2),
    "PorteId" INTEGER,
    "OpcaoSimplesId" INTEGER,
    "DataOpcaoSimples" DATE,
    "DataExclusaoSimples" DATE,
    "OpcaoMei" VARCHAR(1),
    "SituacaoEspecial" VARCHAR(23),
    "DataSituacaoEspecial" DATE
);

-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "PK_DadoCadastral" PRIMARY KEY ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "UK_DadoCadastral" UNIQUE ("Cnpj");

-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_MatrizFilial" FOREIGN KEY ("MatrizFilialId") REFERENCES "MatrizFilial" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_SituCada" FOREIGN KEY ("SituacaoCadastralId") REFERENCES "SituacaoCadastral" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_MotiSitu" FOREIGN KEY ("MotivoSituacaoCadastralId") REFERENCES "MotivoSituacaoCadastral" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_Pais" FOREIGN KEY ("PaisId") REFERENCES "Pais" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_NatuJuri" FOREIGN KEY ("NaturezaJuridicaId") REFERENCES "NaturezaJuridica" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_AtivEcon" FOREIGN KEY ("AtividadeEconomicaId") REFERENCES "AtividadeEconomica" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_UnidFede" FOREIGN KEY ("UnidadeFederacaoId") REFERENCES "UnidadeFederacao" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_Municipio" FOREIGN KEY ("MunicipioId") REFERENCES "Municipio" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_QualResp" FOREIGN KEY ("QualificacaoResponsavelId") REFERENCES "Qualificacao" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_Porte" FOREIGN KEY ("PorteId") REFERENCES "Porte" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_OpcaoSimples" FOREIGN KEY ("OpcaoSimplesId") REFERENCES "OpcaoSimples" ("Id");
-- ALTER TABLE "DadoCadastral" ADD CONSTRAINT "FK_DadoCadastral_Logico" FOREIGN KEY ("OpcaoMei") REFERENCES "Logico" ("Codigo");

CREATE TABLE "Socio" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Cnpj" VARCHAR(14) NOT NULL,
    "TipoSocioId" INTEGER NOT NULL,
    "Nome" VARCHAR(150) NOT NULL,
    "CpfCnpj" VARCHAR(14),
    "QualificacaoSocioId" INTEGER,
    "PercentualCapitalSocial" DECIMAL(14,2),
    "DataEntradaSociedade" DATE,
    "PaisId" INTEGER, --VARCHAR(3), -- alimentar essa tabela
    "CpfRepresentanteLegal" VARCHAR(11),
    "NomeRepresentanteLegal" VARCHAR(60),
    "QualificacaoRepresentanteId" INTEGER
);

ALTER TABLE "Socio" ADD CONSTRAINT "PK_Socio" PRIMARY KEY ("Id");

-- ALTER TABLE "Socio" ADD CONSTRAINT "FK_Socio_DadoCadastral" FOREIGN KEY ("Cnpj") REFERENCES "DadoCadastral" ("Cnpj");
-- ALTER TABLE "Socio" ADD CONSTRAINT "FK_Socio_TipoSocio" FOREIGN KEY ("TipoSocioId") REFERENCES "TipoSocio" ("Id");
-- ALTER TABLE "Socio" ADD CONSTRAINT "FK_Socio_QualificacaoSocio" FOREIGN KEY ("QualificacaoSocioId") REFERENCES "Qualificacao" ("Id");
-- ALTER TABLE "Socio" ADD CONSTRAINT "FK_Socio_Pais" FOREIGN KEY ("PaisId") REFERENCES "Pais" ("Id");
-- ALTER TABLE "Socio" ADD CONSTRAINT "FK_Socio_QualificacaoRepr" FOREIGN KEY ("QualificacaoRepresentanteId") REFERENCES "Qualificacao" ("Id");

CREATE TABLE "AtividadeEconomicaSecundaria" (
    "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "Cnpj" VARCHAR(14) NOT NULL,
    "AtividadeEconomicaId" INTEGER NOT NULL --VARCHAR(7)
);

-- ALTER TABLE "AtividadeEconomicaSecundaria" ADD CONSTRAINT "PK_AtividadeEconomicaSecundaria" PRIMARY KEY ("Id");
-- ALTER TABLE "AtividadeEconomicaSecundaria" ADD CONSTRAINT "UK_AtividadeEconomicaSecundaria" UNIQUE ("Cnpj","AtividadeEconomicaId");
-- CREATE INDEX "IX_AtivEconSecu_Cnpj_AtivEconId" ON "AtividadeEconomicaSecundaria" ("Cnpj", "AtividadeEconomicaId");

-- ALTER TABLE "AtividadeEconomicaSecundaria" ADD CONSTRAINT "FK_AtivEconSecu_DadoCadastral" FOREIGN KEY ("Cnpj") REFERENCES "DadoCadastral" ("Cnpj");
-- ALTER TABLE "AtividadeEconomicaSecundaria" ADD CONSTRAINT "FK_AtivEconSecu_AtivEcon" FOREIGN KEY ("AtividadeEconomicaId") REFERENCES "AtividadeEconomica" ("Id");

/* *********************************** DATA ********************************* */

SET TERM ^ ;

create or alter procedure "ProcData" (
    data_in char(8))
returns (
    data_out date)
as
declare variable ano_txt char(4);
declare variable mes_txt char(2);
declare variable dia_txt char(2);
declare variable ano integer;
declare variable mes integer;
declare variable dia integer;
begin

  data_out = NULL;

  if (character_length(data_in) = 8) then
  begin
      ano_txt = right('0000' || trim(substring(data_in from 1 for 4)),4);
      mes_txt = right('00' || trim(substring(data_in from 5 for 2)),2);
      dia_txt = right('00' || trim(substring(data_in from 7 for 2)),2);
      ano = CAST(ano_txt AS INTEGER);
      mes = CAST(mes_txt AS INTEGER);
      dia = CAST(dia_txt AS INTEGER);
      if ((ano BETWEEN 1 AND 9999) AND (mes BETWEEN 1 AND 12) AND (dia BETWEEN 1 AND 31)) then
      BEGIN
        data_out = CAST(dia_txt || '.' || mes_txt || '.' || ano_txt AS DATE);
      END
  end

  suspend;

  WHEN ANY DO
  begin
    data_out = NULL;
    suspend;
  end

end^

SET TERM ; ^

/* ******************************** DETALHE ********************************* */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcImportaDetalhe" (
    LINHA CHAR(1201))
returns (
    DataCadastralId INTEGER)
as
declare variable Temp                        VARCHAR(200);
declare variable Cnpj                        VARCHAR(14);
declare variable MatrizFilialCd              INTEGER;
declare variable MatrizFilialId              INTEGER;
declare variable RazaoSocialNomeEmpresarial  VARCHAR(150);
declare variable NomeFantasia                VARCHAR(55);
declare variable SituacaoCadastralCd         INTEGER;
declare variable SituacaoCadastralId         INTEGER;
declare variable DataSituacaoCadastral       DATE;
declare variable MotivoSituacaoCadastralCd   INTEGER;
declare variable MotivoSituacaoCadastralId   INTEGER;
declare variable NomeCidadeExterior          VARCHAR(55);
declare variable PaisCd                      VARCHAR(3);
declare variable PaisId                      VARCHAR(3);
declare variable PaisNome                    VARCHAR(70);
declare variable NaturezaJuridicaCd          INTEGER;
declare variable NaturezaJuridicaId          INTEGER;
declare variable DataInicioAtividade         DATE;
declare variable AtividadeEconomicaCd        VARCHAR(7);
declare variable AtividadeEconomicaId        INTEGER;
declare variable TipoLogradouro              VARCHAR(20);
declare variable Logradouro                  VARCHAR(60);
declare variable Numero                      VARCHAR(6);
declare variable Complemento                 VARCHAR(156);
declare variable Bairro                      VARCHAR(50);
declare variable Cep                         VARCHAR(8);
declare variable UnidadeFederacaoCd          VARCHAR(2);
declare variable UnidadeFederacaoId          INTEGER;
declare variable MunicipioCd                 VARCHAR(4);
declare variable MunicipioId                 INTEGER;
declare variable MunicipioNome               VARCHAR(50);
declare variable Ddd1                        VARCHAR(4);
declare variable Telefone1                   VARCHAR(9);
declare variable Ddd2                        VARCHAR(4);
declare variable Telefone2                   VARCHAR(9);
declare variable DddFax                      VARCHAR(4);
declare variable Fax                         VARCHAR(9);
declare variable CorreioEletronico           VARCHAR(115);
declare variable QualificacaoResponsavelCd   INTEGER;
declare variable QualificacaoResponsavelId   INTEGER;
declare variable CapitalSocial               DECIMAL(14,2);
declare variable PorteCd                     INTEGER;
declare variable PorteId                     INTEGER;
declare variable OpcaoSimplesCd              INTEGER;
declare variable OpcaoSimplesId              INTEGER;
declare variable DataOpcaoSimples            DATE;
declare variable DataExclusaoSimples         DATE;
declare variable OpcaoMei                    VARCHAR(1);
declare variable SituacaoEspecial            VARCHAR(23);
declare variable DataSituacaoEspecial        DATE;
begin
  /* Procedure Text */
    Cnpj = trim(substring(LINHA from 4 for 14)); -- VARCHAR(14);
    MatrizFilialCd = cast(substring(LINHA from 18 for 1) AS INTEGER); -- INTEGER;
    RazaoSocialNomeEmpresarial = trim(substring(LINHA from 19 for 150)); -- VARCHAR(150);

    Temp = trim(substring(LINHA from 169 for 55)); -- VARCHAR(55);
    if (Temp <> '') then
        NomeFantasia = Temp;

    Temp = trim(substring(LINHA from 224 for 2));
    if (Temp <> '') then
        SituacaoCadastralCd = cast('0'|| Temp AS INTEGER); -- INTEGER;

    Temp = trim(substring(LINHA from 226 for 8));
    execute procedure "ProcData" :Temp returning_values :DataSituacaoCadastral;

    Temp = trim(substring(LINHA from 234 for 2));
    if (Temp <> '') then
        MotivoSituacaoCadastralCd = cast('0'|| Temp AS INTEGER); -- INTEGER;
    if (MotivoSituacaoCadastralCd = 0) then
        MotivoSituacaoCadastralCd = NULL;

    Temp = trim(substring(LINHA from 236 for 55)); -- VARCHAR(55);
    if (Temp <> '') then
        NomeCidadeExterior = Temp; -- INTEGER;

    Temp = trim(substring(LINHA from 291 for 3)); -- VARCHAR(3);
    if (Temp <> '') then
        PaisCd = Temp;

    Temp = trim(substring(LINHA from 294 for 70)); -- VARCHAR(70) Nome do Pais
    if (Temp <> '') then
        PaisNome = Temp;

    Temp = trim(substring(LINHA from 364 for 4));
    if (Temp <> '') then
        NaturezaJuridicaCd = cast('0'|| Temp AS INTEGER); -- INTEGER;

    Temp = trim(substring(LINHA from 368 for 8));
    execute procedure "ProcData" :Temp returning_values :DataInicioAtividade;

    Temp = trim(substring(LINHA from 376 for 7)); -- VARCHAR(7);
    if (Temp <> '') then
        AtividadeEconomicaCd = Temp;

    Temp = trim(substring(LINHA from 383 for 20)); -- VARCHAR(20);
    if (Temp <> '') then
        TipoLogradouro = Temp;

    Temp = trim(substring(LINHA from 403 for 60)); -- VARCHAR(60);
    if (Temp <> '') then
        Logradouro = Temp;

    Temp = trim(substring(LINHA from 463 for 6)); -- VARCHAR(6);
    if (Temp <> '') then
        Numero = Temp;

    Temp = trim(substring(LINHA from 469 for 156)); -- VARCHAR(156);
    if (Temp <> '') then
        Complemento = Temp;

    Temp = trim(substring(LINHA from 625 for 50)); -- VARCHAR(50);
    if (Temp <> '') then
        Bairro = Temp;

    Temp = trim(substring(LINHA from 675 for 8)); -- VARCHAR(8);
    if (Temp <> '') then
        Cep = Temp;

    Temp = trim(substring(LINHA from 683 for 2)); -- VARCHAR(2);
    if (Temp <> '') then
        UnidadeFederacaoCd = Temp;

    Temp = trim(substring(LINHA from 685 for 4)); -- VARCHAR(4);
    if (Temp <> '') then
        MunicipioCd = Temp;

    Temp = trim(substring(LINHA from 689 for 50)); -- Nome do Município
    if (Temp <> '') then
        MunicipioNome = Temp;

    Temp = substring(LINHA from 739 for 12); -- DDD-Telefone1

    Ddd1 = trim(substring(Temp from 1 for 4)); -- VARCHAR(4);
    if (Ddd1 = '') then
        Ddd1 = NULL;

    Telefone1 = trim(substring(Temp from 5 for 8)); -- VARCHAR(9);
    if (Telefone1 = '') then
        Telefone1 = NULL;

    Temp = substring(LINHA from 751 for 12); -- DDD-Telefone2

    Ddd2 = trim(substring(Temp from 1 for 4)); -- VARCHAR(4);
    if (Ddd2 = '') then
        Ddd2 = NULL;

    Telefone2 = trim(substring(Temp from 5 for 8)); -- VARCHAR(9);
    if (Telefone2 = '') then
        Telefone2 = NULL;

    Temp = substring(LINHA from 763 for 12); -- DDD-FAX

    DddFax = trim(substring(Temp from 1 for 4)); -- VARCHAR(4);
    if (DddFax = '') then
        DddFax = NULL;

    Fax = trim(substring(Temp from 5 for 8)); -- VARCHAR(9);
    if (Fax = '') then
        Fax = NULL;

    Temp = trim(substring(LINHA from 775 for 115)); -- VARCHAR(115);
    if (Temp <> '') then
        CorreioEletronico = Temp;

    Temp = trim(substring(LINHA from 890 for 2));
    if (Temp <> '') then
        QualificacaoResponsavelCd = cast('0'|| Temp AS INTEGER); -- INTEGER;
    if (QualificacaoResponsavelCd = 0) then
        QualificacaoResponsavelCd = NULL;

    Temp = trim(substring(LINHA from 892 for 14));
    if (Temp <> '') then
        CapitalSocial = cast('0'|| Temp AS DECIMAL(14, 2)); -- DECIMAL(14,2);

    Temp = trim(substring(LINHA from 906 for 2));
    if (Temp <> '') then
        PorteCd = cast('0'|| Temp AS INTEGER); -- INTEGER;

    Temp = trim(substring(LINHA from 908 for 1));
    if (Temp <> '') then
        OpcaoSimplesCd = cast('0'|| Temp AS INTEGER); -- INTEGER;

    Temp = trim(substring(LINHA from 909 for 8));
    execute procedure "ProcData" :Temp returning_values :DataOpcaoSimples;

    Temp = trim(substring(LINHA from 917 for 8));
    execute procedure "ProcData" :Temp returning_values :DataExclusaoSimples;

    OpcaoMei = trim(substring(LINHA from 925 for 1)); -- VARCHAR(1);
    if (OpcaoMei = '') then
        OpcaoMei = NULL;

    SituacaoEspecial = trim(substring(LINHA from 926 for 23)); -- VARCHAR(23);
    if (SituacaoEspecial = '') then
        SituacaoEspecial = NULL;

    Temp = trim(substring(LINHA from 949 for 8));
    execute procedure "ProcData" :Temp returning_values :DataSituacaoEspecial;

    if (character_length(MatrizFilialCd) > 0) then
    begin
        MatrizFilialId = NULL;
        select "Id" from "MatrizFilial" WHERE "Codigo" = :MatrizFilialCd into :MatrizFilialId;
        if (MatrizFilialId IS NULL) then
            INSERT INTO "MatrizFilial" ("Codigo","Descricao") VALUES (:MatrizFilialCd, :MatrizFilialCd) returning "Id" into :MatrizFilialId;
    end

    if (character_length(SituacaoCadastralCd) > 0) then
    begin
        SituacaoCadastralId = NULL;
        select "Id" from "SituacaoCadastral" where "Codigo" = :SituacaoCadastralCd into :SituacaoCadastralId;
        if (SituacaoCadastralId IS NULL) then
            INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (:SituacaoCadastralCd, :SituacaoCadastralCd) returning "Id" into :SituacaoCadastralId;
    end

    if (character_length(MotivoSituacaoCadastralCd) > 0) then
    begin
        MotivoSituacaoCadastralId = NULL;
        select "Id" from "MotivoSituacaoCadastral" where "Codigo" = :SituacaoCadastralCd into :MotivoSituacaoCadastralId;
        if (MotivoSituacaoCadastralId IS NULL) then
            INSERT INTO "MotivoSituacaoCadastral" ("Codigo","Descricao") VALUES (:MotivoSituacaoCadastralCd, :MotivoSituacaoCadastralCd) returning "Id" into :MotivoSituacaoCadastralId;
    end

    if (PaisCd IS NULL AND PaisNome IS NULL AND UnidadeFederacaoCd <> 'EX') then
    begin
        -- 1058    BRASIL
        PaisCd = '001';
        PaisNome = 'Brasil';
    end

    if (PaisNome IS NULL) then
    begin
        PaisNome = PaisCd;
    end

    if (character_length(PaisCd) > 0) then
    begin
        PaisId = NULL;
        select "Id" from "Pais" where "Codigo" = :PaisCd into :PaisId;
        if (PaisId IS NULL) then
            INSERT INTO "Pais" ("Codigo","Nome") VALUES (:PaisCd, :PaisNome) returning "Id" into :PaisId;
    end

    if (character_length(UnidadeFederacaoCd) > 0) then
    begin
        UnidadeFederacaoId = NULL;
        select "Id" from "UnidadeFederacao" where "Codigo" = :UnidadeFederacaoCd into :UnidadeFederacaoId;
        if (UnidadeFederacaoId IS NULL) then
        begin
            if (UnidadeFederacaoCd = 'EX') then
                UPDATE OR INSERT INTO "UnidadeFederacao" ("Codigo","Nome") VALUES (:UnidadeFederacaoCd, 'EXTERIOR') MATCHING ("Codigo") returning "Id" into :UnidadeFederacaoId;
            else
                UPDATE OR INSERT INTO "UnidadeFederacao" ("Codigo","Nome", "PaisId") VALUES (:UnidadeFederacaoCd, :UnidadeFederacaoCd, :PaisId) MATCHING ("Codigo") returning "Id" into :UnidadeFederacaoId;
        end
    end

    if (character_length(MunicipioCd) > 0) then
    begin
        MunicipioId = NULL;
        select "Id" from "Municipio" where "Codigo" = :MunicipioCd into :MunicipioId;
        if (MunicipioId IS NULL) then
        begin
            if (UnidadeFederacaoCd = 'EX' AND MunicipioCd = '9707') then
                UPDATE OR INSERT INTO "Municipio" ("Codigo","Nome","UnidadeFederacaoId") VALUES ('9707', 'EXTERIOR',:UnidadeFederacaoId) MATCHING ("Codigo") returning "Id" into :MunicipioId;
            else
            begin
                if (character_length(MunicipioNome) > 0) then
                    UPDATE OR INSERT INTO "Municipio" ("Codigo","Nome","UnidadeFederacaoId") VALUES (:MunicipioCd, :MunicipioNome, :UnidadeFederacaoId) MATCHING ("Codigo") returning "Id" into :MunicipioId;
        
                if (character_length(MunicipioNome) = 0) then
                    UPDATE OR INSERT INTO "Municipio" ("Codigo","Nome","UnidadeFederacaoId") VALUES (:MunicipioCd, :MunicipioCd, :UnidadeFederacaoId) MATCHING ("Codigo") returning "Id" into :MunicipioId;
            end
        end
    end

    if (character_length(QualificacaoResponsavelCd) > 0) then
    begin
        QualificacaoResponsavelId = NULL;
        select "Id" from "Qualificacao" where "Codigo" = :QualificacaoResponsavelCd into :QualificacaoResponsavelId;
        if (QualificacaoResponsavelId IS NULL) then
            INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (:QualificacaoResponsavelCd, :QualificacaoResponsavelCd, 'S') returning "Id" into :QualificacaoResponsavelId;
    end

    if (character_length(PorteCd) > 0) then
    begin
        PorteId = NULL;
        select "Id" from "Porte" where "Codigo" = :PorteCd into :PorteId;
        if (PorteId IS NULL) then
            INSERT INTO "Porte" ("Codigo","Descricao") VALUES (:PorteCd, :PorteCd) returning "Id" into :PorteId;
    end

    if (character_length(OpcaoSimplesCd) > 0) then
    begin
        OpcaoSimplesId = NULL;
        select "Id" from "OpcaoSimples" where "Codigo" = :OpcaoSimplesCd into :OpcaoSimplesId;
        if (OpcaoSimplesId IS NULL) then
            INSERT INTO "OpcaoSimples" ("Codigo","Descricao") VALUES (:OpcaoSimplesCd, :OpcaoSimplesCd) returning "Id" into :OpcaoSimplesId;
    end

    if (character_length(NaturezaJuridicaCd) > 0) then
    begin
        NaturezaJuridicaId = NULL;
        select "Id" from "NaturezaJuridica" where "Codigo" = :NaturezaJuridicaCd into :NaturezaJuridicaId;
        if (NaturezaJuridicaId IS NULL) then
            UPDATE OR INSERT INTO "NaturezaJuridica" ("Codigo","Descricao") VALUES (:NaturezaJuridicaCd, cast(:NaturezaJuridicaCd as varchar(50))) MATCHING ("Codigo") returning "Id" into :NaturezaJuridicaId;
    end

    if (character_length(AtividadeEconomicaCd) > 0) then
    begin
        AtividadeEconomicaId = NULL;
        select "Id" from "AtividadeEconomica" where "Codigo" = :AtividadeEconomicaCd into :AtividadeEconomicaId;
        if (AtividadeEconomicaId IS NULL) then
            UPDATE OR INSERT INTO "AtividadeEconomica" ("Codigo","Descricao") VALUES (:AtividadeEconomicaCd, :AtividadeEconomicaCd) MATCHING ("Codigo") returning "Id" into :AtividadeEconomicaId;
    end

    INSERT INTO "DadoCadastral" (
        "Cnpj",
        "MatrizFilialId",
        "RazaoSocialNomeEmpresarial",
        "NomeFantasia",
        "SituacaoCadastralId",
        "DataSituacaoCadastral",
        "MotivoSituacaoCadastralId",
        "NomeCidadeExterior",
        "PaisId",
        "NaturezaJuridicaId",
        "DataInicioAtividade",
        "AtividadeEconomicaId",
        "TipoLogradouro",
        "Logradouro",
        "Numero",
        "Complemento",
        "Bairro",
        "Cep",
        "UnidadeFederacaoId",
        "MunicipioId",
        "Ddd1",
        "Telefone1",
        "Ddd2",
        "Telefone2",
        "DddFax",
        "Fax",
        "CorreioEletronico",
        "QualificacaoResponsavelId",
        "CapitalSocial",
        "PorteId",
        "OpcaoSimplesId",
        "DataOpcaoSimples",
        "DataExclusaoSimples",
        "OpcaoMei",
        "SituacaoEspecial",
        "DataSituacaoEspecial"
    ) VALUES (
        :Cnpj,
        :MatrizFilialId,
        :RazaoSocialNomeEmpresarial,
        :NomeFantasia,
        :SituacaoCadastralId,
        :DataSituacaoCadastral,
        :MotivoSituacaoCadastralId,
        :NomeCidadeExterior,
        :PaisId,
        :NaturezaJuridicaId,
        :DataInicioAtividade,
        :AtividadeEconomicaId,
        :TipoLogradouro,
        :Logradouro,
        :Numero,
        :Complemento,
        :Bairro,
        :Cep,
        :UnidadeFederacaoId,
        :MunicipioId,
        :Ddd1,
        :Telefone1,
        :Ddd2,
        :Telefone2,
        :DddFax,
        :Fax,
        :CorreioEletronico,
        :QualificacaoResponsavelId,
        :CapitalSocial,
        :PorteId,
        :OpcaoSimplesId,
        :DataOpcaoSimples,
        :DataExclusaoSimples,
        :OpcaoMei,
        :SituacaoEspecial,
        :DataSituacaoEspecial
    ) returning "Id" into :DataCadastralId;

    suspend;
end^

SET TERM ; ^

/* *********************************** Socio ******************************** */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcImportaSocio" (
    LINHA CHAR(1201))
returns (
    SocioId INTEGER)
as
declare variable Temp                        VARCHAR(200);
declare variable Cnpj                        VARCHAR(14);
declare variable TipoSocioCd                 INTEGER;
declare variable TipoSocioId                 INTEGER;
declare variable Nome                        VARCHAR(150);
declare variable SituacaoCadastralCd         INTEGER;
declare variable SituacaoCadastralId         INTEGER;
declare variable CpfCnpj                     VARCHAR(14);
declare variable QualificacaoSocioCd         INTEGER;
declare variable QualificacaoSocioId         INTEGER;
declare variable PercentualCapitalSocial     DECIMAL(14,2);
declare variable DataEntradaSociedade        DATE;
declare variable PaisCd                      VARCHAR(3);
declare variable PaisId                      VARCHAR(3);
declare variable PaisNome                    VARCHAR(70);
declare variable CpfRepresentanteLegal       VARCHAR(11);
declare variable NomeRepresentanteLegal      VARCHAR(60);
declare variable QualificacaoRepresentanteCd INTEGER;
declare variable QualificacaoRepresentanteId INTEGER;
begin
    Cnpj = trim(substring(LINHA from 4 for 14)); -- VARCHAR(14);
    TipoSocioId = cast(substring(LINHA from 18 for 1) AS INTEGER); -- INTEGER;
    Nome = trim(substring(LINHA from 19 for 150)); -- VARCHAR(150);

    Temp = trim(substring(LINHA from 169 for 14)); -- VARCHAR(14);
    if (Temp <> '') then
        CpfCnpj = Temp;

    Temp = trim(substring(LINHA from 183 for 2));
    if (Temp <> '') then
        QualificacaoSocioId = cast('0'|| Temp AS INTEGER); -- INTEGER;
    if (QualificacaoSocioId = 0) then
        QualificacaoSocioId = NULL;

    Temp = trim(substring(LINHA from 185 for 5));
    if (Temp <> '') then
        PercentualCapitalSocial = cast('0'|| Temp AS DECIMAL(14, 2)); -- DECIMAL(14,2);

    Temp = trim(substring(LINHA from 190 for 8));
    execute procedure "ProcData" :Temp returning_values :DataEntradaSociedade;

    Temp = trim(substring(LINHA from 198 for 3)); -- VARCHAR(3);
    if (Temp <> '') then
        PaisId = Temp;

    Temp = trim(substring(LINHA from 201 for 70)); -- VARCHAR(70) Nome do Pais
    if (Temp <> '') then
        PaisNome = Temp;

    Temp = trim(substring(LINHA from 271 for 11)); -- VARCHAR(11)
    if (Temp <> '') then
        CpfRepresentanteLegal = Temp;

    Temp = trim(substring(LINHA from 282 for 60)); -- VARCHAR(60)
    if (Temp <> '') then
        NomeRepresentanteLegal = Temp;

    Temp = trim(substring(LINHA from 342 for 2));
    if (Temp <> '') then
        QualificacaoRepresentanteId = cast('0'|| Temp AS INTEGER); -- INTEGER;
    if (QualificacaoRepresentanteId = 0) then
        QualificacaoRepresentanteId = NULL;

    if (character_length(TipoSocioCd) > 0) then
    begin
        TipoSocioId = NULL;
        select "Id" from "TipoSocio" where "Codigo" = :TipoSocioCd into :TipoSocioId;
        if (TipoSocioId IS NULL) then
            INSERT INTO "TipoSocio" ("Codigo","Descricao") VALUES (:TipoSocioCd, :TipoSocioCd) returning "Id" into :TipoSocioId;
    end

    if (PaisCd IS NULL AND PaisNome IS NULL) then
    begin
        -- 1058    BRASIL
        -- PaisCd = '001';
        -- PaisNome = 'Brasil';
    end

    if (PaisNome IS NULL) then
    begin
        PaisNome = PaisCd;
    end

    if (character_length(PaisCd) > 0) then
    begin
        PaisId = NULL;
        select "Id" from "Pais" where "Codigo" = :PaisCd into :PaisId;
        if (PaisId IS NULL) then
            INSERT INTO "Pais" ("Codigo","Nome") VALUES (:PaisCd, :PaisNome) returning "Id" into :PaisId;
    end

    if (character_length(SituacaoCadastralCd) > 0) then
    begin
        SituacaoCadastralId = NULL;
        select "Id" from "SituacaoCadastral" where "Codigo" = :SituacaoCadastralCd into :SituacaoCadastralId;
        if (SituacaoCadastralId IS NULL) then
            INSERT INTO "SituacaoCadastral" ("Codigo","Descricao") VALUES (:SituacaoCadastralCd, :SituacaoCadastralCd) returning "Id" into :SituacaoCadastralId;
    end

    if (character_length(QualificacaoSocioCd) > 0) then
    begin
        QualificacaoSocioId = NULL;
        select "Id" from "Qualificacao" where "Codigo" = :QualificacaoSocioCd into :QualificacaoSocioId;
        if (QualificacaoSocioId IS NULL) then
            INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (:QualificacaoSocioCd, :QualificacaoSocioCd, 'S') returning "Id" into :QualificacaoSocioId;
    end

    if (character_length(QualificacaoRepresentanteCd) > 0) then
    begin
        QualificacaoRepresentanteId = NULL;
        select "Id" from "Qualificacao" where "Codigo" = :QualificacaoRepresentanteCd into :QualificacaoRepresentanteId;
        if (QualificacaoRepresentanteId IS NULL) then
            INSERT INTO "Qualificacao" ("Codigo","Descricao","ColetadoAtualmente") VALUES (:QualificacaoRepresentanteCd, :QualificacaoRepresentanteCd, 'S') returning "Id" into :QualificacaoRepresentanteId;
    end

    INSERT INTO "Socio" (
        "Cnpj",
        "TipoSocioId",
        "Nome",
        "CpfCnpj",
        "QualificacaoSocioId",
        "PercentualCapitalSocial",
        "DataEntradaSociedade",
        "PaisId",
        "CpfRepresentanteLegal",
        "NomeRepresentanteLegal",
        "QualificacaoRepresentanteId"
    ) VALUES (
        :Cnpj,
        :TipoSocioId,
        :Nome,
        :CpfCnpj,
        :QualificacaoSocioId,
        :PercentualCapitalSocial,
        :DataEntradaSociedade,
        :PaisId,
        :CpfRepresentanteLegal,
        :NomeRepresentanteLegal,
        :QualificacaoRepresentanteId
    ) returning "Id" into :SocioId;

    suspend;
end^

SET TERM ; ^

/* *********************************** CNAE ********************************* */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcImportaCnae" (
    LINHA CHAR(1201))
AS
declare variable CnaeSecundaria              VARCHAR(693);
declare variable tamanho                     INTEGER;
declare variable Cnpj                        VARCHAR(14);
declare variable AtividadeEconomicaCd        VARCHAR(7);
declare variable AtividadeEconomicaId        INTEGER;
declare variable CnaeInserida                VARCHAR(693);
begin
    Cnpj = trim(substring(LINHA from 4 for 14)); -- VARCHAR(14);

    CnaeSecundaria = trim(substring(LINHA from 18 for 693)); -- VARCHAR(7);
    if (CnaeSecundaria <> '') then
    begin
        tamanho = character_length(CnaeSecundaria);
        CnaeInserida = '';
        WHILE (tamanho >= 7) DO
        BEGIN
            if (tamanho > 7) then
            begin
                AtividadeEconomicaCd = trim(substring(CnaeSecundaria from 1 for 7));
                CnaeSecundaria = substring(CnaeSecundaria from 8 for tamanho - 7);
            end
            else
            begin
                AtividadeEconomicaCd = trim(CnaeSecundaria);
                CnaeSecundaria = '';
            end
            tamanho = character_length(CnaeSecundaria);

            if (character_length(AtividadeEconomicaCd) = 7 and AtividadeEconomicaCd <> '0000000' and position(AtividadeEconomicaCd, CnaeInserida) = 0) then
            begin
                AtividadeEconomicaId = NULL;
                select "Id" from "AtividadeEconomica" where "Codigo" = :AtividadeEconomicaCd into :AtividadeEconomicaId;
                if (AtividadeEconomicaId IS NULL) then
                    INSERT INTO "AtividadeEconomica" ("Codigo","Descricao") VALUES (:AtividadeEconomicaCd, :AtividadeEconomicaCd) returning "Id" into :AtividadeEconomicaId;

                INSERT INTO "AtividadeEconomicaSecundaria" (
                    "Cnpj",
                    "AtividadeEconomicaId"
                ) VALUES (
                    :Cnpj,
                    :AtividadeEconomicaId
                ); -- MATCHING ("Cnpj", "AtividadeEconomicaId");

                CnaeInserida = CnaeInserida || AtividadeEconomicaCd;

            end
        end
    end
end^

SET TERM ; ^

/* *********************************** DADOS ********************************* */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcImportaDados" (
    ArquivoId INTEGER, Maximo INTEGER = 0)
returns (
    conta_out INTEGER)
as
declare variable tipo char(1);
declare variable linha char(1201);
declare variable conta INTEGER;
declare variable DadoCadastralId INTEGER;
declare variable SocioId INTEGER;
-- declare dadoscursor_01 cursor for (select "REGISTRO" from "DADOS_01");
-- declare dadoscursor_20 cursor for (select "REGISTRO" from "DADOS_20");
begin
  /* Procedure Text */
    conta = 0;

    if (ArquivoId BETWEEN 1 AND 20) then
    begin
/*
        if (ArquivoId = 1) then
            OPEN dadoscursor_01;

        if (ArquivoId = 20) then
            OPEN dadoscursor_20;
*/
        WHILE (1 = 2) DO
        BEGIN
/*    
            if (ArquivoId = 1) then
                FETCH dadoscursor_01 INTO :linha;

            if (ArquivoId = 20) then
                FETCH dadoscursor_20 INTO :linha;
*/    
            IF (ROW_COUNT = 0) THEN
                LEAVE;
    
            tipo = substring(linha from 1 for 1);
    
            if (tipo = '0') then
            begin
                /* CONTEM O VALOR 0 PARA IDENTIFICAR O REGISTRO HEADER */
            end
    
            if (tipo = '1') then
            begin
                /* CONTEM O VALOR 1 PARA IDENTIFICAR O REGISTRO DETALHE */
                execute procedure "ProcImportaDetalhe" :linha returning_values :DadoCadastralId;
            end
    
            if (tipo = '2') then
            begin
                /* CONTEM O VALOR 2 PARA IDENTIFICAR O REGISTRO DETALHE SOCIOS */
                -- execute procedure "ProcImportaSocio" :linha returning_values :SocioId;
            end
    
            if (tipo = '6') then
            begin
                /* CONTEM O VALOR 6 PARA IDENTIFICAR O REGISTRO CNAEs SECUNDÁRIOS */
                execute procedure "ProcImportaCnae" :linha;
            end
    
            if (tipo = '9') then
            begin
                /* CONTEM O VALOR 9 PARA IDENTIFICAR O REGISTRO TRAILLER */
            end
    
            conta = conta + 1;
    
            IF (Maximo <> 0 AND conta = Maximo) THEN
            begin
                LEAVE;
            end
    
        END
/*    
        if (ArquivoId = 1) then
            CLOSE dadoscursor_01;

        if (ArquivoId = 2) then
            CLOSE dadoscursor_20;
*/
    end

    conta_out = conta;
    suspend;
end^

SET TERM ; ^

/* *********************************** ProcAtualizaMunic ********************************* */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcAtualizaMunic"
as
declare variable SairUm INTEGER;
declare variable SairDois INTEGER;
declare variable MunicipioId INTEGER;
declare variable Ativos INTEGER;
declare variable Inativos INTEGER;
declare variable incremento INTEGER;
declare variable posicao INTEGER;
declare dadoscursor_01 cursor for (
SELECT
    i."MunicipioId",
    SUM(CASE i."SituacaoCadastralId" WHEN 2 THEN 1 ELSE 0 END) AS Ativos,
    SUM(CASE i."SituacaoCadastralId" WHEN 2 THEN 0 ELSE 1 END) AS Inativos
FROM (
    SELECT d."MunicipioId", d."SituacaoCadastralId"
    FROM "DadoCadastral" d
    WHERE d."Id" > :posicao
    ORDER BY d."Id"
    ROWS :incremento
) i
GROUP BY
    i."MunicipioId"
);

begin

    in autonomous transaction do
    begin
        UPDATE
            "Municipio"
        SET
            "QuantidadeEmpresasAtivas" = 0,
            "QuantidadeEmpresasInativas" = 0;
    end

    incremento = 1000000;
    posicao = 0;
    SairUm = 0;
    SairDois = 0;

    WHILE (SairUm = 0) DO
    BEGIN

        SairDois = 0;

        OPEN dadoscursor_01;

        FETCH dadoscursor_01 INTO :MunicipioId, :Ativos, :Inativos;

        IF (ROW_COUNT = 0) THEN
        BEGIN
            SairUm = 1;
            SairDois = 1;
        END

        WHILE (SairDois = 0) DO
        BEGIN

            in autonomous transaction do
            begin
                UPDATE
                    "Municipio"
                SET
                    "QuantidadeEmpresasAtivas" = "QuantidadeEmpresasAtivas" + :Ativos,
                    "QuantidadeEmpresasInativas" = "QuantidadeEmpresasInativas" + :Inativos
                WHERE
                    "Id" = :MunicipioId;
            end

            FETCH dadoscursor_01 INTO :MunicipioId, :Ativos, :Inativos;
    
            IF (ROW_COUNT = 0) THEN
            BEGIN
                SairDois = 1;
            END
    
        END

        CLOSE dadoscursor_01;

        posicao = posicao + incremento;

    END

    in autonomous transaction do
    begin
        UPDATE
            "UnidadeFederacao" u
        SET
            u."QuantidadeEmpresasAtivas" = coalesce(
            (
                SELECT
                    SUM(ma."QuantidadeEmpresasAtivas") AS Ativas
                FROM
                    "Municipio" ma
                WHERE
                    ma."UnidadeFederacaoId" = u."Id"
            ),0),
            u."QuantidadeEmpresasInativas" = coalesce(
            (
                SELECT
                    SUM(mi."QuantidadeEmpresasInativas") AS Inativos
                FROM
                    "Municipio" mi
                WHERE
                    mi."UnidadeFederacaoId" = u."Id"
            ),0);
    end

    in autonomous transaction do
    begin
        UPDATE
            "Pais" p
        SET
            p."QuantidadeEmpresasAtivas" = coalesce(
            (
                SELECT
                    SUM(ua."QuantidadeEmpresasAtivas") AS Ativas
                FROM
                    "UnidadeFederacao" ua
                WHERE
                    ua."PaisId" = p."Id"
            ),0),
            p."QuantidadeEmpresasInativas" = coalesce(
            (
                SELECT
                    SUM(ui."QuantidadeEmpresasInativas") AS Inativos
                FROM
                    "UnidadeFederacao" ui
                WHERE
                    ui."PaisId" = p."Id"
            ),0);
    end

end^

SET TERM ; ^

/* *********************************** ProcAtualizaAtivEcon ****************************** */

SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ProcAtualizaAtivEcon"
as
declare variable SairUm INTEGER;
declare variable SairDois INTEGER;
declare variable AtividadeEconomicaId INTEGER;
declare variable Ativos INTEGER;
declare variable Inativos INTEGER;
declare variable incremento INTEGER;
declare variable posicao INTEGER;
declare dadoscursor_01 cursor for (
SELECT
    i."AtividadeEconomicaId",
    SUM(CASE i."SituacaoCadastralId" WHEN 2 THEN 1 ELSE 0 END) AS Ativos,
    SUM(CASE i."SituacaoCadastralId" WHEN 2 THEN 0 ELSE 1 END) AS Inativos
FROM (
    SELECT d."AtividadeEconomicaId", d."SituacaoCadastralId"
    FROM "DadoCadastral" d
    WHERE d."Id" > :posicao
    ORDER BY d."Id"
    ROWS :incremento
) i
GROUP BY
    i."AtividadeEconomicaId"
);

begin

    in autonomous transaction do
    begin
        UPDATE
            "AtividadeEconomica"
        SET
            "QuantidadeEmpresasAtivas" = 0,
            "QuantidadeEmpresasInativas" = 0;
    end

    incremento = 1000000;
    posicao = 0;
    SairUm = 0;
    SairDois = 0;

    WHILE (SairUm = 0) DO
    BEGIN

        SairDois = 0;

        OPEN dadoscursor_01;

        FETCH dadoscursor_01 INTO :AtividadeEconomicaId, :Ativos, :Inativos;

        IF (ROW_COUNT = 0) THEN
        BEGIN
            SairUm = 1;
            SairDois = 1;
        END

        WHILE (SairDois = 0) DO
        BEGIN

            in autonomous transaction do
            begin
                UPDATE
                    "AtividadeEconomica"
                SET
                    "QuantidadeEmpresasAtivas" = "QuantidadeEmpresasAtivas" + :Ativos,
                    "QuantidadeEmpresasInativas" = "QuantidadeEmpresasInativas" + :Inativos
                WHERE
                    "Id" = :AtividadeEconomicaId;
            end

            FETCH dadoscursor_01 INTO :AtividadeEconomicaId, :Ativos, :Inativos;
    
            IF (ROW_COUNT = 0) THEN
            BEGIN
                SairDois = 1;
            END
    
        END

        CLOSE dadoscursor_01;

        posicao = posicao + incremento;

    END

end^

SET TERM ; ^
